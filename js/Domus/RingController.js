/**
 * Copyright 2015 Sky Wickenden
 *
 * This file is part of StreamBed.
 * An implementation of the Babbling Brook Protocol.
 *
 * StreamBed is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * at your option any later version.
 *
 * StreamBed is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with StreamBed.  If not, see <http://www.gnu.org/licenses/>
 *
 * @fileOverview Receives messages from the ring domain.
 * @author Sky Wickenden
 */

// Create the BabblingBrook namespace
if (typeof BabblingBrook !== 'object') {
    BabblingBrook = {};
}
if (typeof BabblingBrook.Domus !== 'object') {
    BabblingBrook.Domus = {};
}

/**
 * Receives messages from the ring domain.
 *
 * All methods starting with 'action' are actions that are called by the interact class
 * They all have the same call signature.
 *      {object} data Some data sent with the request.
 *      {object} meta_data Meta data about the request
 *      {function} meta_data.onSuccess The function to call with the requested data.
 *          It accepts one paramater, a data object.
 *      {function} meta_data.onError The function to call if there is an error.
 *          It accepts two paramaters.
 *          The first is an error_code string as defined in saltNe.Models.errorTypes
 *          This is required.
 *          The second is an error data object, which can contain any relevant data.
 *      {string} request_domain The domain that sent this request.
 *      {number} timeout A millisecond timeout for when this request will timeout.
 *
 */
BabblingBrook.Domus.RingController = (function () {
    'use strict';
    return {

        /**
         * Receives a message from the ring iframe that it is ready. Allows this domus domain to report itself as ready.
         *
         * @param {object} data
         * @param {string} data.status Will contain 'ready' when it is ready.
         * @param {object} meta_data See Module definition for more details.
         *
         * @return void
         */
        actionDomainReady : function (data, meta_data) {

            meta_data.onSuccess({});    // Call regardless to free up the memory.

            BabblingBrook.Domus.Loaded.setRingIframeLoaded();

            // Set up the ring Rhythm process.
            BabblingBrook.Domus.Ring.setup();
            BabblingBrook.Domus.Ring.cycle();
        },

        /**
         * Receives processed results from the ring domain and stores them in the rings domain.
         *
         * @param {object} data
         * @param {object} data.results The results generated by the Rhythm.
         * @param {object} meta_data See Module definition for more details.
         *
         * @return void
         */
        actionStoreRhythmData : function (data, meta_data) {

            BabblingBrook.TestErrors.clearErrors();
            var test = BabblingBrook.Test.isA([data.computed_data, 'object']);
            if (test === false) {
                meta_data.onError('StoreRingResults_test');
            }

            BabblingBrook.Domus.Ring.StoreResults(data, meta_data.onSuccess, meta_data.onError);
        },

        /**
         * Fetch any data that is requested by the rhythm and then pass it to the ring domain for processing.
         *
         * @param {object} data
         * @param {object} data.url The url to fetch data from. Must be accessible via a scientia domain.
         * @param {object} meta_data See Module definition for more details.
         *
         * @return void
         */
        actionGetMiscData : function (data, meta_data) {

            BabblingBrook.TestErrors.clearErrors();
            var test = BabblingBrook.Test.isA([
                [data.url, 'url']
            ]);
            if (test === false) {
                meta_data.onError('GetData_test');
            }

            BabblingBrook.Domus.SharedRhythm.getMiscData(
                data.url,
                meta_data.onSuccess,
                meta_data.onError,
                meta_data.timeout
            );
        },

        /**
         * Stores data for a rhythm/user between sessions in the users domain.
         *
         * @param {object} data Data container object.
         * @param {string} data.data The data that a rhythm is requesting be stored.
         * @param {object} meta_data See Module definition for more details.
         *
         * @returns {void}
         */
        actionStoreData : function (data, meta_data) {
            var test = BabblingBrook.Test.isA([[data.data, 'string']]);
            if (test === false) {
                meta_data.onError('rhythm_domus_data_data_not_string');
                return;
            }

            var url = BabblingBrook.Domus.Ring.getCurrentRhythmUrl();
            BabblingBrook.Domus.SharedRhythm.storeData(
                data.data,
                url,
                meta_data.onSuccess,
                meta_data.onError,
                meta_data.timeout
            );
        },

        /**
         * Stores data for a rhythm/user between sessions.
         *
         * @param {object} data Empty data object
         * @param {object} meta_data See Module definition for more details.
         *
         * @returns {void}
         */
        actionGetStoredData : function (data, meta_data) {
            var url = BabblingBrook.Domus.Ring.getCurrentRhythmUrl();
            BabblingBrook.Domus.SharedRhythm.getData(url, meta_data.onSuccess, meta_data.onError, meta_data.timeout);
        },

        /**
         * Proccess a request from a ring rhythm to accept a membership request from a user.
         *
         * @param {object} request_data The data sent to this action from the ring domain.
         * @param {object} request_data.user A standard user object for the user whose
         *      membership request has been accepted.
         * @param {object} meta_data See Module definition for more details.
         *
         * @returns {undefined}
         */
        actionAcceptMembershipRequest : function (request_data, meta_data) {
            var test = BabblingBrook.Test.isA([[request_data.user, 'user']]);
            if (test === false) {
                meta_data.onError('ring_domus_accept_membership_request_test');
                return;
            }

            var current_ring = BabblingBrook.Domus.Ring.getCurrentRing();
            var admin_user = {
                username : BabblingBrook.Domus.user.username,
                domain :BabblingBrook.Domus.user.domain
            };

            BabblingBrook.Domus.SendToScientiaFrame.sendMessage(
                current_ring.domain,
                'AcceptRingMembershipRequest',
                {
                    ring_username : current_ring.username,
                    accepted_user : request_data.user,
                    admin_password : current_ring.ring_password,
                    admin_user : admin_user
                },
                true,
                meta_data.onSuccess,
                meta_data.onError,
                meta_data.timeout
            );
        },

        /**
         * Proccess a request to decline a ring membership request from a user.
         *
         * @param {object} request_data The request data sent to this action.
         * @param {object} request_data.user A standard user object for the user whose
         *      membership request has been declined.
         * @param {object} meta_data See Module definition for more details.
         *
         * @returns {undefined}
         */
        actionDeclineRingMembershipRequest : function (request_data, meta_data) {
            var test1 = BabblingBrook.Test.isA([
                [request_data.user, 'user'],
            ]);
            if (test1 === false) {
                meta_data.onError('ring_domus_decline_membership_request_test');
                return;
            }
            var current_ring = BabblingBrook.Domus.Ring.getCurrentRing();
            var admin_user = {
                username : BabblingBrook.Domus.user.username,
                domain :BabblingBrook.Domus.user.domain
            };

            BabblingBrook.Domus.SendToScientiaFrame.sendMessage(
                current_ring.domain,
                'DeclineRingMembershipRequest',
                {
                    ring_username : current_ring.username,
                    accepted_user : request_data.user,
                    admin_password : current_ring.ring_password,
                    admin_user : admin_user
                },
                true,
                meta_data.onSuccess,
                meta_data.onError,
                meta_data.timeout
            );
        },

        /**
         * Proccess a request to ban a member of a ring.
         *
         * @param {object} request_data The request data sent to this action.
         * @param {object} request_data.user A standard user object for the user whose
         *      membership request has been declined.
         * @param {object} meta_data See Module definition for more details.
         *
         * @returns {undefined}
         */
        actionBanMember : function (request_data, meta_data) {
            var test1 = BabblingBrook.Test.isA([
                [request_data.user, 'user'],
            ]);
            if (test1 === false) {
                meta_data.onError('ring_domus_ban_member_test');
                return;
            }
            var current_ring = BabblingBrook.Domus.Ring.getCurrentRing();
            var admin_user = {
                username : BabblingBrook.Domus.user.username,
                domain :BabblingBrook.Domus.user.domain
            };

            BabblingBrook.Domus.SendToScientiaFrame.sendMessage(
                current_ring.domain,
                'BanRingMember',
                {
                    ring_username : current_ring.username,
                    user : request_data.user,
                    admin_password : current_ring.ring_password,
                    admin_user : admin_user
                },
                true,
                meta_data.onSuccess,
                meta_data.onError,
                meta_data.timeout
            );
        },

        /**
         * Proccess a request to ban a member of a ring.
         *
         * @param {object} request_data The request data sent to this action.
         * @param {object} request_data.user A standard user object for the user whose
         *      membership request has been declined.
         * @param {object} meta_data See Module definition for more details.
         *
         * @returns {undefined}
         */
        actionReinstateMember : function (request_data, meta_data) {
            var test1 = BabblingBrook.Test.isA([
                [request_data.user, 'user'],
            ]);
            if (test1 === false) {
                meta_data.onError('ring_domus_reinstate_member_test');
                return;
            }
            var current_ring = BabblingBrook.Domus.Ring.getCurrentRing();
            var admin_user = {
                username : BabblingBrook.Domus.user.username,
                domain :BabblingBrook.Domus.user.domain
            };

            BabblingBrook.Domus.SendToScientiaFrame.sendMessage(
                current_ring.domain,
                'ReinstateRingMember',
                {
                    ring_username : current_ring.username,
                    user : request_data.user,
                    admin_password : current_ring.ring_password,
                    admin_user : admin_user
                },
                true,
                meta_data.onSuccess,
                meta_data.onError,
                meta_data.timeout
            );
        },

        /**
         * Recieves an error from the ring domain ready to be passed to the client domain for reporting.
         *
         * @returns {undefined}
         */
        actionError : function (request_data, meta_data) {
            BabblingBrook.Domus.Interact.postAMessage(
                {
                    domain : 'ring',
                    error : request_data.error
                },
                BabblingBrook.Domus.Controller.client_domain,
                'Error',
                function () {},
                function () {
                    console.error(
                        'actionError in the domus domain RingController is ' +
                        'erroring whilst waiting for the client to repsond.'
                    );
                },
                BabblingBrook.Domus.Controller.client_https
            );
        }
    };

}());