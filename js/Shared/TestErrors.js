/**
 * Copyright 2015 Sky Wickenden
 * 
 * This file is part of StreamBed.
 * An implementation of the Babbling Brook Protocol.
 * 
 * StreamBed is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * at your option any later version.
 * 
 * StreamBed is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with StreamBed.  If not, see <http://www.gnu.org/licenses/>
 * 
 * @fileOverview Keeps a record of errors generated by the Test and Model Modules.
 * @author Sky Wickenden
 */

// Create the BabblingBrook namespace
if (typeof BabblingBrook !== 'object') {
    BabblingBrook = {};
}

/**
 * @namespace A store of errors generated from tests and models.
 * IMPORTANT : It is the repsonsibility of the action running tests to call clearErrors() before begining;
 * otherwise old errors may still be present.
 * @package JS_Shared
 */
BabblingBrook.TestErrors =  (function () {
    'use strict';
    /**
     * @type {string} What happens with errors. Valid values : throw, return
     */
    var error_mode = 'throw';//'return';

    /**
     * @type {string[]} A list of errors that have been reported.
     */
    var errors = [];

    // Public methods.
    return {

        /**
         * Sets the error reporting mode.
         * @param {string} mode Valid values are : throw, return.
         */
        setErrorMode : function (mode) {
            if (mode === 'throw' || mode === 'return') {
                error_mode = mode;
            }
        },

        /**
         * Sets the error reporting mode.
         * @param {string} mode Valid values are : throw, return.
         */
        getErrorMode : function (mode) {
            return error_mode;
        },

        /**
         * Report an error.
         *
         * @param {string} The error to report.
         * @param {object} Any variables to log.
         *
         * @return undefined
         */
        reportError : function (error, vars) {
            errors.push(error);
            if (error_mode === 'throw') {
                console.error(error);
                console.log(vars);
            } else if (error_mode === 'return') {
                return;
            }
        },

        /**
         * Get all errors, concatenated as a single string.
         * @return {string[]}
         */
        getErrors : function () {
            return errors.join(' ');
        },

        /**
         * Clears all current errors.
         */
        clearErrors : function () {
            errors = [];
        }
    };
}());