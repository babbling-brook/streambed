<?php
/**
 * Copyright 2015 Sky Wickenden
 * 
 * This file is part of StreamBed.
 * An implementation of the Babbling Brook Protocol.
 * 
 * StreamBed is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * at your option any later version.
 * 
 * StreamBed is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with StreamBed.  If not, see <http://www.gnu.org/licenses/>
 */


/**
 * Model for the stream_public DB table.
 * An index of top stream results for public and search engine consumption.
 *
 * These results are either generated by the owner of the stream, or via a default algorithm
 *
 * @package PHP_Models
 */
class StreamPublic extends CActiveRecord
{

    /**
     * The primary key of this item.
     *
     * @var integer
     */
    public $stream_public_id;


    /**
     * The extra id of the stream that this post belongs to.
     *
     * @var integer
     */
    public $stream_extra_id;


    /**
     * The id of the post that is being indexed.
     *
     * @var integer
     */
    public $post_id;

    /**
     * The display order of this post in this stream.
     *
     * @var integer
     */
    public $score;


    /**
     * The rhythm that was used to generate these results. Null is for generic results.
     *
     * @var integer
     */
    public $rhythm_extra_id;

    /**
     * If this is a tree sort then this is the top parent id for the tree.
     *
     * @var integer
     */
    public $top_parent_id;

    /**
     * Returns the parent model.
     *
     * @param type $className The name of this class.
     *
     * @return Model
     */
    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    /**
     * Getter for the tables name.
     *
     * @return string the associated database table name.
     */
    public function tableName() {
        return 'stream_public';
    }


    /**
     * Rules applied when validating this models attributes.
     *
     * @link http://www.yiiframework.com/doc/api/1.1/CModel#rules-detail
     *
     * @return array An array of rules.
     */
    public function rules() {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('stream_extra_id, post_id, rhythm_extra_id, score', 'length', 'max' => 11),
        );
    }

    /**
     * Relationships to other tables used in fetching nested models.
     *
     * @return array(array)
     */
    public function relations() {
        return array();
    }

    /**
     * Labels used for this models attributes on Yii html components.
     *
     * @return array customized attribute labels (name=> label).
     */
    public function attributeLabels() {
        return array(
            'stream_public_id' => 'Stream Public',
            'stream_extra_id' => 'Stream Extra',
            'post_id' => 'Post',
        );
    }

    /**
     * Get presorted results for a stream.
     *
     * @param integer $stream_extra_id The extra id of the stream to fetch results for.
     * @param type $rhythm_extra_id The extra id of the rhythm to fetch results for.
     * @param integer $page The page number of results to fetch.
     *
     * @return array
     */
    public static function getPostsForStream($stream_extra_id, $rhythm_extra_id=null, $page=null) {
        $connection = Yii::app()->db;
        $sql = "SELECT
                     stream_public.score
                    ,UNIX_TIMESTAMP(stream_public.time_cached) AS time_cached
                    ,post.post_id
                    ,post.site_id
                    ,post.site_post_id
                    ,post.user_id
                    ,post.date_created
                    ,post_content.text
                    ,post_content.link_title
                    ,post_content.link
                    ,user.username
                    ,site.domain AS user_domain
                    ,post.child_count
                FROM
                    stream_public
                    INNER JOIN post ON stream_public.post_id = post.post_id
                    INNER JOIN post_content
                        ON post.post_id = post_content.post_id
                        AND post_content.revision =
                            (SELECT revision FROM post_content
                                WHERE post_id = post.post_id ORDER BY revision DESC LIMIT 1)
                        AND post_content.display_order = 1
                    INNER JOIN user ON post.user_id = user.user_id
                    INNER JOIN site ON user.site_id = site.site_id
                WHERE
                    stream_public.stream_extra_id = :stream_extra_id
                    AND stream_public.top_parent_id IS NULL
                    AND post.date_created < :cooldown
                    AND (rhythm_extra_id = :rhythm_extra_id OR (:rhythm_extra_id IS NULL AND rhythm_extra_id IS NULL))
                ORDER BY stream_public.score DESC, post.date_created DESC, post.post_id DESC
                LIMIT :limit_start, :qty";
        $command = $connection->createCommand($sql);
        $command->bindValue(":stream_extra_id", $stream_extra_id, PDO::PARAM_INT);
        if ($rhythm_extra_id === false) {
            $command->bindValue(":rhythm_extra_id", null, PDO::PARAM_NULL);
        } else {
            $command->bindValue(":rhythm_extra_id", $rhythm_extra_id, PDO::PARAM_INT);
        }
        $qty = Yii::app()->params['results_per_stream_page'] * $page;
        $command->bindValue(":qty", intval($qty), PDO::PARAM_INT);
        $limit_start = ($page - 1) * $qty;
        $command->bindValue(":limit_start", intval($limit_start), PDO::PARAM_INT);
        $cooldown = date('Y-m-d H:i:s', time() - Yii::app()->params['post_cooldown']);
        $command->bindValue(":cooldown", $cooldown, PDO::PARAM_INT);
        $posts = $command->queryAll();
        return $posts;
    }

    /**
     * Clear existing results for a stream and rhythm
     *
     * @param integer $stream_extra_id
     * @param integer|boolean [$rhythm_extra_id=false] The extra id for the rhythm to clear results for.
     *      If false then the default results are cleared.
     *      If 0 (zero) then all results are cleared.
     * @param string [$top_parent_id] If a tree sort is being cleared, then this is the top parent of the tree.
     *
     * @return void
     */
    public static function clearPublic($stream_extra_id, $rhythm_extra_id=false, $top_parent_id=null) {
        $connection = Yii::app()->db;
        $sql = "DELETE FROM stream_public
                WHERE
                    stream_extra_id = :stream_extra_id
                    AND (rhythm_extra_id = :rhythm_extra_id
                        OR (rhythm_extra_id IS NULL AND :rhythm_extra_id IS NULL))
                        OR :rhythm_extra_id = 0
                    AND (top_parent_id = :top_parent_id
                        OR( top_parent_id IS NULL AND :top_parent_id IS NULL))";
        $command = $connection->createCommand($sql);
        $command->bindValue(":stream_extra_id", $stream_extra_id, PDO::PARAM_INT);
        if ($rhythm_extra_id === false) {
            $command->bindValue(":rhythm_extra_id", null, PDO::PARAM_NULL);
        } else {
            $command->bindValue(":rhythm_extra_id", $rhythm_extra_id, PDO::PARAM_INT);
        }
        if (isset($top_parent_id) === false) {
            $command->bindValue(":top_parent_id", null, PDO::PARAM_NULL);
        } else {
            $command->bindValue(":top_parent_id", $top_parent_id, PDO::PARAM_INT);
        }
        $command->execute();
    }


    /**
     * Makes the most popular posts for user sky
     *
     * @param array $stream An stream object as obtained from the getByName function.
     * @param integer $rhythm_extra_id The id of the rhythm. ('skys priority' rhythm extra id.)
     *
     * @return void
     */
    public static function makeSkysStream($stream, $rhythm_extra_id, $top_parent_id=null) {

        // Clear old results before inserting new ones.
        self::clearPublic($stream->extra->stream_extra_id, $rhythm_extra_id);

        // Fetch the id of all the posts in this time period.
        $connection = Yii::app()->db;
        $sql = "INSERT INTO stream_public
                    (
                        stream_extra_id
                        ,post_id
                        ,score
                        ,top_parent_id
                        ,rhythm_extra_id
                    )
                    SELECT
                         :stream_extra_id
                        ,post.post_id
                        ,take.value
                        ,:top_parent_id
                        ,:rhythm_extra_id
                        FROM
                            post
                            LEFT JOIN take ON post.post_id = take.post_id
                        WHERE
                            post.stream_extra_id = :stream_extra_id
                            AND (take.user_id = :user_id OR take.user_id is null)
                            AND (take.value >= 0 OR take.value is null)";
        $command = $connection->createCommand($sql);
        $command->bindValue(":stream_extra_id", $stream->extra->stream_extra_id, PDO::PARAM_INT);
        $command->bindValue(":rhythm_extra_id", $rhythm_extra_id, PDO::PARAM_INT);
        $command->bindValue(":user_id", 10000, PDO::PARAM_INT);
        if (isset($top_parent_id) === false) {
            $command->bindValue(":top_parent_id", null, PDO::PARAM_NULL);
        } else {
            $command->bindValue(":top_parent_id", $top_parent_id, PDO::PARAM_INT);
        }
        $command->execute();

        StreamPublicRhythm::addRhythm($stream->extra->stream_extra_id, $rhythm_extra_id);
    }

    /**
     * Makes the newest public stream posts.
     *
     * @param array $stream A stream object representing the stream that is being sorted.
     * @param integer $rhythm_extra_id The extra id of the rhythm used to sort the results. (The 'newest' rhythm id).
     *
     * @return void
     */
    public static function makeNewestStream($stream, $rhythm_extra_id, $top_parent_id=null) {

        // Clear old results before inserting new ones.
        self::clearPublic($stream->extra->stream_extra_id, $rhythm_extra_id);

        // Fetch the id of all the posts in this time period.
        $connection = Yii::app()->db;
        $sql = "INSERT INTO stream_public
                    (
                        stream_extra_id
                        ,post_id
                        ,score
                        ,top_parent_id
                        ,rhythm_extra_id
                    )
                    SELECT
                         :stream_extra_id
                        ,post_id
                        ,UNIX_TIMESTAMP(post.date_created)
                        ,:top_parent_id
                        ,:rhythm_extra_id
                        FROM post
                        WHERE stream_extra_id = :stream_extra_id
                        ORDER BY post.date_created
                        LIMIT 250";
        $command = $connection->createCommand($sql);
        $command->bindValue(":stream_extra_id", $stream->extra->stream_extra_id, PDO::PARAM_INT);
        $command->bindValue(":rhythm_extra_id", $rhythm_extra_id, PDO::PARAM_INT);
        $command->bindValue(":user_id", 10000, PDO::PARAM_INT);
        if (isset($top_parent_id) === false) {
            $command->bindValue(":top_parent_id", null, PDO::PARAM_NULL);
        } else {
            $command->bindValue(":top_parent_id", $top_parent_id, PDO::PARAM_INT);
        }
        $command->execute();

        StreamPublicRhythm::addRhythm($stream->extra->stream_extra_id, $rhythm_extra_id);
    }

    /**
     * Makes the most popular posts for a stream.
     *
     * @param array $stream An stream object as obtained from the getByName function.
     * @param integer $rhythm_extra_id The id of the rhythm.
     * @param string $timespan The timespan to fetch results for. Permitted values are 'hourly', 'daily' and 'weekly'.
     * @param string $top_parent_id The top parent post id for tree sorts.
     *
     * @return void
     */
    public static function makePopularStream($stream, $rhythm_extra_id, $timespan, $top_parent_id=null) {

        // Clear old results before inserting new ones.
        self::clearPublic($stream->extra->stream_extra_id, $rhythm_extra_id);
        StreamPublicRhythm::removeRhythm($stream->extra->stream_extra_id);

        // Time in seconds to fetch posts from this stream for.
        switch($timespan) {
            case 'hourly':
                $time_to_match = 60 * 60;
                break;
            case 'daily' :
                $time_to_match = 60 * 60 * 24;
                break;
            case 'weekly' :
                $time_to_match = 60 * 60 * 24 * 7;
                break;
            case 'recently' :
                $time_to_match = 60 * 60 * 24 * 7 * 52 * 10;    // ten years
                break;
        }

        $connection = Yii::app()->db;
        $sql = "
            INSERT INTO stream_public
                (
                    stream_extra_id
                    ,post_id
                    ,score
                    ,top_parent_id
                    ,rhythm_extra_id
                )
                SELECT
                     :stream_extra_id
                    ,post.post_id
                    ,SUM(take.value) AS sum_take
                    ,:top_parent_id
                    ,:rhythm_extra_id
                    FROM
                        post
                        LEFT JOIN take ON post.post_id = take.post_id
                    WHERE
                        post.stream_extra_id = :stream_extra_id
                        AND (
                            UNIX_TIMESTAMP(post.date_created) > :later_than_time
                            OR UNIX_TIMESTAMP(take.date_taken) > :later_than_time
                        )
                        AND (
                            post.top_parent = :top_parent_id
                            OR :top_parent_id IS NULL
                        AND status = :public_status
                    )
                    GROUP BY post.post_id
                    HAVING sum_take >= 0 OR sum_take is null
                    LIMIT 5000
                ";
        $command = $connection->createCommand($sql);
        $p = $stream->extra->stream_extra_id;
        $command->bindValue(":stream_extra_id", $stream->extra->stream_extra_id, PDO::PARAM_INT);
        $later_than_time = time() - $time_to_match;
        $command->bindValue(":later_than_time", $later_than_time, PDO::PARAM_INT);
        $command->bindValue(":rhythm_extra_id", $rhythm_extra_id, PDO::PARAM_INT);
        $command->bindValue(":public_status", LookupHelper::getId('post.status', 'public'), PDO::PARAM_INT);
        if (isset($top_parent_id) === false) {
            $command->bindValue(":top_parent_id", null, PDO::PARAM_NULL);
        } else {
            $command->bindValue(":top_parent_id", $top_parent_id, PDO::PARAM_INT);
        }
        $command->execute();
        StreamPublicRhythm::addRhythm($stream->extra->stream_extra_id, $rhythm_extra_id);
    }

    /**
     * Make the popular scores for a post
     *
     * @param integer $post_id The id of an post to genreate and record a popular score for.
     * @param integer $stream_extra_id The extra id of the stream that owns the post.
     * @param integer $rhythm_extra_id The extra id of the rhythm used to sort the results.
     * @param integer [$top_parent_id] The id of the top parent if this is a tree sort.
     *
     * @return void
     */
    public static function makePopular($post_id, $stream_extra_id, $rhythm_extra_id, $top_parent_id=null) {
        $connection = Yii::app()->db;
        $sql = "INSERT INTO stream_public
                (
                    stream_extra_id
                    ,post_id
                    ,score
                    ,top_parent_id
                    ,rhythm_extra_id
                ) VALUES (
                     :stream_extra_id
                    ,:post_id
                    ,(SELECT COUNT(take_id) FROM take WHERE post_id = :post_id AND value > 0)
                        - (SELECT COUNT(take_id) FROM take WHERE post_id = :post_id AND value < 0)
                    ,:top_parent_id
                    ,:rhythm_extra_id
                )";
        $command = $connection->createCommand($sql);
        $command->bindValue(":stream_extra_id", $stream_extra_id, PDO::PARAM_INT);
        $command->bindValue(":post_id", $post_id, PDO::PARAM_INT);
        if (isset($top_parent_id) === false) {
            $command->bindValue(":top_parent_id", null, PDO::PARAM_NULL);
        } else {
            $command->bindValue(":top_parent_id", $top_parent_id, PDO::PARAM_INT);
        }
        if (isset($rhythm_extra_id) === false) {
            $command->bindValue(":rhythm_extra_id", null, PDO::PARAM_NULL);
        } else {
            $command->bindValue(":rhythm_extra_id", $rhythm_extra_id, PDO::PARAM_INT);
        }
        $command->execute();
    }

    /**
     * Generate popular scores for all the sub posts of an post.
     *
     * @param type $post_id
     */
    public static function makePopularTree($post_id) {
        $stream_extra_id = Post::getStreamExtraId($post_id);
        self::clearPublic(
            $stream_extra_id,
            Yii::app('config')->params['default_public_tree_filter_rhythm_id'],
            $post_id
        );

        // Fetch the id of all the posts to score.
        $connection = Yii::app()->db;
        $sql = "SELECT
                    post_id
                FROM post
                WHERE
                    top_parent = :post_id
                    aND post.status = :public_status
                    AND date_created < :cooldown
                    AND stream_extra_id > 0";   // This is to prevent test posts being included.
        $command = $connection->createCommand($sql);
        $command->bindValue(":post_id", $post_id, PDO::PARAM_INT);
        $cooldown = date('Y-m-d H:i:s', time() - Yii::app()->params['post_cooldown']);
        $command->bindValue(":cooldown", $cooldown, PDO::PARAM_INT);
        $command->bindValue(":public_status", LookupHelper::getId('post.status', 'public'), PDO::PARAM_INT);
        $posts = $command->queryAll();

        foreach ($posts as $post) {
            self::makePopular(
                $post['post_id'],
                $stream_extra_id,
                Yii::app('config')->params['default_public_tree_filter_rhythm_id'],
                $post_id
            );
        }
    }

    /**
     * Fetch a tree of sub posts and all the data required for a public display.
     *
     * @param type $post_id The id of the post to fetcha tree for.
     *
     * return void
     */
    public static function getTreePostsForPost($post_id) {
        $connection = Yii::app()->db;
        $sql = "SELECT
                     post.post_id
                    ,UNIX_TIMESTAMP(stream_public.time_cached) AS time_cached
                    ,post.stream_extra_id
                    ,post.parent
                    ,stream_public.score
                    ,post_content.revision
                    ,user.username
                    ,site.domain
                    ,UNIX_TIMESTAMP(post.date_created) as timestamp
                FROM
                    post
                    INNER JOIN stream_public ON post.post_id = stream_public.post_id
                    INNER JOIN user ON post.user_id = user.user_id
                    INNER JOIN site ON user.site_id = site.site_id
                    INNER JOIN post_content ON post.post_id = post_content.post_id
                        AND post_content.revision =
                            (
                             SELECT revision FROM post_content
                             WHERE post_id = post.post_id ORDER BY revision DESC LIMIT 1
                            )
                        AND post_content.display_order = 1
                WHERE
                    stream_public.top_parent_id = :post_id
                    AND post.date_created < :cooldown
                    AND post.stream_extra_id > 0
                ORDER BY post.parent, stream_public.score, post.date_created DESC";
        // @fixme post.stream_extra_id > 0 Is needed due to some test posts having a zero value. This
        //             should be refactored so that these posts are not in the table with invalid values.
        $command = $connection->createCommand($sql);
        $command->bindValue(":post_id", $post_id, PDO::PARAM_INT);
        $cooldown = date('Y-m-d H:i:s', time() - Yii::app()->params['post_cooldown']);
        $command->bindValue(":cooldown", $cooldown, PDO::PARAM_INT);
        $post_rows = $command->queryAll();

        // The final tree of posts as they will appear on the page are stored in here.
        // Each top scoring post is followed by recursively itterated top scoring children.
        // This works because an post child will allways have a higher post_id than its parent and so
        // will allways be present in the final array when it is time to insert it.
        $posts = array();

        // As posts are inserted into $posts they are also inserted here with an index reference for quick
        // lookup.
        $post_lookup = array();

        foreach ($post_rows as $post_row) {

            $post_row['content'] = PostContent::getPostContent(
                $post_row['post_id'],
                $post_row['revision']
            );

            $post_row['children'] = array();

            // Handle top level children.
            if ($post_row['parent'] === $post_id) {

                $post_row['depth'] = 1;
                $count = array_push($posts, $post_row);
                // Set a pointer to this parent post, indexing it with its post_id.
                $post_lookup[$post_row['post_id']] = &$posts[($count - 1)];

            // Else we need to find where to insert it.
            } else {
                if (isset($post_lookup[$post_row['parent']]) === false) {
                    throw new Exception("A child post_id is lower than its parent. This should never happen.");
                }

                $parent = &$post_lookup[$post_row['parent']];
                $post_row['depth'] = $parent['depth'] + 1;
                $count = array_push($parent['children'], $post_row);
                $post_lookup[$post_row['post_id']] = &$parent['children'][($count - 1)];
            }

        }
        return $posts;
    }

    /**
     * Store the generated results for a stream and rhythm.
     *
     * @param integer $stream_extra_id The extra id of the stream to store the results for.
     * @param integer $rhythm_extra_id The extra id of the rhythm to store results for.
     * @param array $posts The post ids and scores to store results for.
     * @param string [$top_parent_id] If a tree sort is being generated, then this is the top parent of the tree.
     *
     * @return void
     */
    public static function storeGenerated($stream_extra_id, $rhythm_extra_id, $posts, $top_parent_id=null) {
        foreach ($posts as $post) {
            if (intval($post['score']) >= 0) {
                $model = new StreamPublic;
                $model->stream_extra_id = $stream_extra_id;
                $model->rhythm_extra_id = $rhythm_extra_id;
                $model->post_id = $post['post_id'];
                $model->score = $post['score'];
                $model->top_parent_id = $top_parent_id;
                $model->save();
            }
        }
        list($usec, $sec) = explode(' ', microtime());
    }

    /**
     * Remove a post from all public results.
     *
     * @param integer $post_id The id of the post to delete.
     *
     * @return void
     */
    public static function deletePost($post_id) {
        $connection = Yii::app()->db;
        $sql = "
            DELETE
            FROM stream_public
            WHERE post_id = :post_id";
        $command = $connection->createCommand($sql);
        $command->bindValue(":post_id", $post_id, PDO::PARAM_INT);
        $command->execute();
    }

    /**
     * Deletes stream_public rows by their stream_extra_id.
     *
     * @param integer $stream_extra_id The id of the stream_extra row that is used to delete these rows.
     *
     * @return void
     */
    public static function deleteByStreamExtraId($stream_extra_id) {
        $connection = Yii::app()->db;
        $sql = "DELETE FROM stream_public
                WHERE stream_extra_id = :stream_extra_id";
        $command = $connection->createCommand($sql);
        $command->bindValue(":stream_extra_id", $stream_extra_id, PDO::PARAM_INT);
        $command->execute();
    }

    /**
     * Deletes stream_public rows by their post_id.
     *
     * @param integer $post_id The id of the post in stream_public that is being deleted.
     *
     * @return void
     */
    public static function deleteByPostId($post_id) {
        $connection = Yii::app()->db;
        $sql = "
            DELETE
            FROM stream_public
            WHERE post_id = :post_id";
        $command = $connection->createCommand($sql);
        $command->bindValue(":post_id", $post_id, PDO::PARAM_INT);
        $command->execute();
    }

    /**
     * Deletes stream_public rows by their top_parent_id.
     *
     * @param integer $top_parent_id The id of the top_parent post in stream_public that is being deleted.
     *
     * @return void
     */
    public static function deleteByTopParentId($top_parent_id) {
        $connection = Yii::app()->db;
        $sql = "
            DELETE
            FROM stream_public
            WHERE top_parent_id = :top_parent_id";
        $command = $connection->createCommand($sql);
        $command->bindValue(":top_parent_id", $top_parent_id, PDO::PARAM_INT);
        $command->execute();
    }

    /**
     * Deletes stream_public rows by their rhythm_extra_id.
     *
     * @param integer $rhythm_extra_id The extra id of the rhythm in stream_public that is being deleted.
     *
     * @return void
     */
    public static function deleteByRhythmExtraId($rhythm_extra_id) {
        $connection = Yii::app()->db;
        $sql = "
            DELETE
            FROM stream_public
            WHERE rhythm_extra_id = :rhythm_extra_id";
        $command = $connection->createCommand($sql);
        $command->bindValue(":rhythm_extra_id", $rhythm_extra_id, PDO::PARAM_INT);
        $command->execute();
    }

    /**
     * Select rows of stream_public data for a stream_extra_id.
     *
     * @param type $stream_extra_id The extra id of the stream to select data for.
     *
     * @return array
     */
    public static function getRowsForStreamExtraId($stream_extra_id) {
        $connection = Yii::app()->db;
        $sql = "SELECT *
                FROM stream_public
                WHERE stream_extra_id = :stream_extra_id";
        $command = $connection->createCommand($sql);
        $command->bindValue(":stream_extra_id", $stream_extra_id, PDO::PARAM_INT);
        $rows = $command->queryAll();
        return $rows;
    }
}

?>
